import UIKit
import Alamofire
import SnapKit
import SwiftyJSON
import Kingfisher
import SwiftyGif

class AnotherUserUploadPostListViewController: UICollectionViewController, UICollectionViewDelegateFlowLayout {
    
    private var numberOfItemsInRow = 3
    private var minimumSpacing = 0
    private var edgeInsetPadding = 0

    fileprivate let cellId = "cellId"
    var heroes: [UserProfileDetail] = []
    var heroes2: UserProfileHead!

    let token = UserDefaults.standard.string(forKey: "loginID") ?? "" //로그인 아이디
    let token2 = UserDefaults.standard.string(forKey: "session") ?? "" //로그인 세션
    
    var currentPage : Int = 1
    var isLoadingList : Bool = false
    
    let logoAnimationView = BackgroundAnimtionView()

    override func viewDidLoad() {
        super.viewDidLoad()

        print("My Upload list User ID:", token)
        print("My Upload list User ID Session:", token2)

        /*print("memberid:", noreceivedValueFromBeforeVC)
        print("email:", no2receivedValueFromBeforeVC)*/

        self.view.backgroundColor = UIColor.white
        
        NotificationCenter.default.addObserver(self, selector: #selector(loadList3), name: NSNotification.Name(rawValue: "load3"), object: nil)
        
        let layout = UICollectionViewFlowLayout()
        layout.minimumInteritemSpacing = 0
        layout.minimumLineSpacing = 0
        collectionView.collectionViewLayout = layout
        
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView?.backgroundColor = .white
        
        collectionView.contentInsetAdjustmentBehavior = .always
        
        collectionView?.register(AnotherUserUploadListCell.self, forCellWithReuseIdentifier: cellId)
        collectionView?.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: 1, right: 0)
        
        loadData()
    }
    
    
    
    override func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        print("this is end, see you in console")
        
        self.view.addSubview(self.logoAnimationView)
        self.logoAnimationView.pinEdgesToSuperView()
        self.logoAnimationView.logoGifImageView.delegate = self
        
        if (((scrollView.contentOffset.y + scrollView.frame.size.height) > scrollView.contentSize.height ) && !isLoadingList){
            print(">>>>>>>>>>>>>>>>>>1")
            self.isLoadingList = true
            self.loadMoreItemsForList()
            
            loadData()
            self.load2()
        }
        
        if (((scrollView.contentOffset.y + scrollView.frame.size.height) < scrollView.contentSize.height ) && !isLoadingList){
            print(">>>>>>>>>>>>>>>>>>2")
            self.isLoadingList = true
            self.loadMoreItemsForList2()
            
            loadData()
            self.load2()
        }
        
        if currentPage == 0 {
            currentPage = 1
        }
    }
    
    
    func reloadData(_ data:Data?) {
        
        let InformationandSupportTitleLabel = UILabel()
        
        if data == nil {
            print(" ------ 데이터 에러 관련 처리 --- ")
            return
        }
        
        do {
            
            let json = try JSONDecoder().decode(UserProfile.self, from: data!)
            print("my upload list json1:", json)

            self.heroes = json.data!.userProfileDetail!
            print("mypage self.heroes:", self.heroes)
            
            self.heroes2 = json.data!.userProfileHead!
            print("mypage self.heroes2:", self.heroes2 as Any)

            self.heroes.forEach { e in
            }

            self.collectionView.reloadData()

            if self.heroes.isEmpty {
                print("my upload list not found")

                InformationandSupportTitleLabel.text = "업로드한 게시물이 없습니다."
                InformationandSupportTitleLabel.textColor = UIColor.black
                InformationandSupportTitleLabel.font = UIFont.systemFont(ofSize: 15)
                self.view.addSubview(InformationandSupportTitleLabel)

                InformationandSupportTitleLabel.snp.makeConstraints { (make) in
                    make.centerX.centerY.equalToSuperview()
                }

            }
            
            if self.heroes2.blockYn == "Y" {
                InformationandSupportTitleLabel.text = "차단한 계정입니다."
                InformationandSupportTitleLabel.textColor = UIColor.black
                InformationandSupportTitleLabel.font = UIFont.systemFont(ofSize: 15)
                self.view.addSubview(InformationandSupportTitleLabel)

                InformationandSupportTitleLabel.snp.makeConstraints { (make) in
                    make.centerX.centerY.equalToSuperview()
                }
            }
            
            else {
            }
            
        } catch {
            print("catch error:", error)
            print(" ------ 서버 데이터 에러 관련 처리 --- ")
        }
    }
    
    
    
    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        if self.heroes.first?.image?.count == 0 {
            return UICollectionViewCell()
        }
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "cellId", for: indexPath) as! AnotherUserUploadListCell
        cell.backgroundColor = UIColor.white
        cell.layer.borderColor = UIColor.lightGray.cgColor
        cell.layer.borderWidth = 1.0
        
        DispatchQueue.main.async {
            //let imageValue = self.heroes[indexPath.row].image
            //print("another user imageValue:", imageValue as Any)
            
            //let url : URL! = URL(string: imageValue!)
            //print("another user thumbnail image url:", url as Any)
        
            //cell.userImage.kf.setImage(with: url)
        }
        
        cell.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(tap)))
        
        return cell
    }
    
    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return heroes.count
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let collectionViewSize = collectionView.frame.size.width
        
        return CGSize(width: collectionViewSize/3, height: collectionViewSize/3)
    }
    
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        return UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
    }
    
    override func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        if indexPath.row == heroes.count - 10, !self.isLoadingList {
            loadMoreData()
        }
    }
    
    
    
    
    
    func getListFromServer(_ pageNumber: Int){
        self.isLoadingList = false
    }
    
    func loadMoreItemsForList(){
        currentPage += 1
        getListFromServer(currentPage)
    }
       
    func loadMoreItemsForList2(){
        currentPage -= 1
        getListFromServer(currentPage)
        
        if currentPage == 0 {
            currentPage = 1
        }
    }
    
    
    func loadData() {
        isLoadingList = false
        collectionView.collectionViewLayout.invalidateLayout()
        var datas: [UserProfileDetail] = []
        //let data = UserProfileDetail(image: self.heroes.first?.image, playCnt: self.heroes.first?.playCnt, publicYn: self.heroes.first?.publicYn, id: self.heroes.first?.id, blockYn: self.heroes.first?.blockYn)
        
        for _ in 0...40 {
            print("heroes.count1:", heroes.count)
            print("datas1:", datas)
        }
        self.collectionView.reloadData()
    }
    

    func loadMoreData() {
        
        if !self.isLoadingList {
            self.isLoadingList = true
            let start = heroes.count
            let end = start + 16
            var datas: [UserProfileDetail] = []
            print("heroes.count2:", heroes.count)
            print("datas2:", datas)
            print("datas2.count:", datas.count)
            print("start2:", start)
            print("end2:", end)
            
            DispatchQueue.global().asyncAfter(deadline: .now() + .seconds(1)) {
                for _ in start...end {
                }
                    DispatchQueue.main.async {
                    self.isLoadingList = false
                }
            }
        }
    }
    
    
    
    
    @objc func tap(_ sender: UITapGestureRecognizer) {
        let location = sender.location(in: self.collectionView)
        let indexPath = self.collectionView.indexPathForItem(at: location)
        
        if indexPath != nil {
            print("UserProfileVideoDetailViewController")
            
            let vc = UserProfileVideoDetailViewController()
            vc.modalPresentationStyle = .fullScreen
            vc.noreceivedValueFromBeforeVC = String(heroes[indexPath!.row].id!)
            print(":::", self.navigationController as Any)
            //self.navigationController?.pushViewController(vc, animated: true)
            //self.present(vc, animated: true, completion: nil)
            vc.navi = self.navigationController
            vc.navi.pushViewController(vc, animated: true)
        }
    }
    
    
    @objc func loadList3(notification: NSNotification) {
        load()
    }
    
    
    func load() {
        //let url = "http://221.147.140.165:8080/userProfile?page=1" //운영서버
        let url = "http://221.147.140.165:8090/userProfile?page=1" //개발서버
        
        /*let headers: HTTPHeaders = [
            "Content-type": "application/json",
            "Authorization": token
        ]
        print("mypage upload list headers:", headers)*/

        let parameters: Parameters = [
            "email": UserDefaults.standard.string(forKey: "email")!,
            "page": "1",
        ]
        print("another user parameters:", parameters)
        
        
        Alamofire.request(url, method: .post, parameters: parameters, headers: nil).responseJSON(completionHandler: { response in
            
            let json = response.result
            print("video ranking json:", json)
            
            switch response.result {
              case .success(let res):
                print(res)
                
                do {
                    let jsonData = try JSONSerialization.data(withJSONObject: res, options: .prettyPrinted)
                    print("jsonData:", jsonData)
                    
                    let json = try JSONDecoder().decode(UserProfile.self, from: jsonData)
                    print("json:", json)
                    
                    self.heroes = (json.data?.userProfileDetail)!
                    self.heroes2 = json.data!.userProfileHead
                    print("self.heroes:", self.heroes)
                    print("self.heroes2:", self.heroes2 as Any)
                    
                    self.heroes.forEach { e in
                        print("게시글 목록 아이디: \(e.id!)")
                        print("게시글 목록 썸네일 이미지 주소: \(e.image!)")
                        print("게시글 목록 공개 여부: \(e.publicYn!)")
                    }
                    
                    print("게시글 목록 차단 여부:", self.heroes2.blockYn as Any)
                    
                    self.collectionView.reloadData()
                    self.collectionView.dataSource = self
                    
                    if self.heroes.isEmpty {
                        let messageLabel = UILabel(frame: CGRect(x: 20.0, y: 0, width: self.collectionView.bounds.size.width - 40.0, height: self.collectionView.bounds.size.height))
                        messageLabel.text = "업로드한 게시물이 없습니다."
                        messageLabel.numberOfLines = 0
                        messageLabel.textAlignment = NSTextAlignment.center
                        messageLabel.sizeToFit()

                        self.collectionView.backgroundView = messageLabel
                    }
                    
                    if self.heroes2.blockYn == "Y" {
                        let messageLabel = UILabel(frame: CGRect(x: 20.0, y: 0, width: self.collectionView.bounds.size.width - 40.0, height: self.collectionView.bounds.size.height))
                        messageLabel.text = "차단된 계정입니다."
                        messageLabel.numberOfLines = 0
                        messageLabel.textAlignment = NSTextAlignment.center
                        messageLabel.sizeToFit()

                        self.collectionView.backgroundView = messageLabel
                        
                    } else {
                    }
                } catch {
                    
                }

            case .failure(let err):
                print(err.localizedDescription)
            }
        })
    }
    
    
    
    
    func load2() {
        //let url = "http://221.147.140.165:8080/userProfile?page=1" //운영서버
        let url = "http://221.147.140.165:8090/userProfile?page=\(currentPage)" //개발서버
        
        /*let headers: HTTPHeaders = [
            "Content-type": "application/json",
            "Authorization": token
        ]
        print("mypage upload list headers:", headers)*/

        let parameters: Parameters = [
            "email": UserDefaults.standard.string(forKey: "email")!,
            "page": "\(currentPage)",
        ]
        print("another user parameters:", parameters)
        
        
        Alamofire.request(url, method: .post, parameters: parameters, headers: nil).responseJSON(completionHandler: { response in
            
            let json = response.result
            print("video ranking json:", json)
            
            switch response.result {
              case .success(let res):
                print(res)
                
                do {
                    let jsonData = try JSONSerialization.data(withJSONObject: res, options: .prettyPrinted)
                    print("jsonData:", jsonData)
                    
                    let json = try JSONDecoder().decode(UserProfile.self, from: jsonData)
                    print("json:", json)
                    
                    self.heroes = (json.data?.userProfileDetail)!
                    self.heroes2 = json.data!.userProfileHead
                    print("self.heroes111:", self.heroes)
                    print("self.heroes2:", self.heroes2 as Any)
                    
                    self.heroes.forEach { e in
                        print("게시글 목록 아이디: \(e.id!)")
                        print("게시글 목록 썸네일 이미지 주소: \(e.image!)")
                        print("게시글 목록 공개 여부: \(e.publicYn!)")
                        //print("게시글 목록 차단 여부: \(e.blockYn!)")
                        //print("게시글 목록 차단 여부:", e.blockYn as Any)   
                    }
                    
                    print("게시글 목록 차단 여부:", self.heroes2.blockYn as Any)
                    
                    if self.heroes.isEmpty {
                        
                        
                    } else {
                        print(">>>> 2222")
                        //InformationandSupportTitleLabel.isHidden = true
                        //self.collectionView.reloadData()
                        //self.collectionView.backgroundView = nil
                    }
                    
                    print("self.heroes.count", self.heroes.count)
                    if self.heroes.count == 0 {
                        self.collectionView.isHidden = false
                    }
                    
                } catch {
                    
                }

            case .failure(let err):
                print(err.localizedDescription)
            }
        })
    }
}

extension AnotherUserUploadPostListViewController: SwiftyGifDelegate {
    func gifDidStop(sender: UIImageView) {
        logoAnimationView.isHidden = true
        
         print("Splash End")
    }
}
